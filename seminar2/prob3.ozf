declare
fun lazy{Filter L H}
   case L
   of nil then nil
   [] A|As then if (A mod H==0)then {Filter As H}
		else A|{Filter As H}
		end
   end
end
fun lazy{Sieve L}
   case L
   of nil then nil
   [] H|T then H|{Sieve {Filter T H}}
   end
end

fun lazy {Gen N}
   N|{Gen N+1}
end


fun lazy {Prime}
   {Sieve {Gen 2}}
end

fun {GetAfterHelper N L}
   case L
   of H|T then if H>N then H
	  else {GetAfterHelper N T}
	  end
   else 'asd'
   end
end

fun {GetAfter N}
   local Xs S in
      Xs={Prime}
      {GetAfterHelper N Xs}
   end
end

fun {Sum Xs A Limit}
   if Limit>0
   then
      case Xs of X|Xr
      then{Sum Xr A+X Limit-1}
      end
   else A
   end
end
{Browse {GetAfter 191}}